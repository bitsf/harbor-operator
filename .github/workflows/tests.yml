name: Tests

on:
  push:
    branches:
    - '**'
  pull_request:
    branches:
    - master
    - release-*

jobs:
  # Dockerfile tests
  docker-build-test:
    runs-on: ubuntu-latest
    name: Build docker image

    steps:
    - uses: actions/checkout@v2
    - run: make docker-build

  docker-lint:
    runs-on: ubuntu-latest
    name: 'dockerfile: lint'
    steps: 
    - uses: actions/checkout@v2
    - run: make docker-lint

  # Golang tests
  go-lint:
    runs-on: ubuntu-latest
    name: 'golang: lint'
    steps:
    - uses: actions/setup-go@v2
      with:
        go-version: 1.14
    - uses: actions/checkout@v2
    - run: make go-lint

  go-dependencies:
    runs-on: ubuntu-latest
    name: Dependencies are up to date
    steps:
    - uses: actions/setup-go@v2
      with:
        go-version: 1.14
    - uses: actions/checkout@v2
    - run: make go-dependencies-test

  check-generated-files:
    runs-on: ubuntu-latest
    name: Generated files are up to date
    steps:
    - uses: actions/setup-go@v2
      with:
        go-version: 1.14
    - uses: actions/checkout@v2
    - run: make generated-diff-test

  go-tests:
    runs-on: ubuntu-latest
    name: K8S v${{ matrix.k8sVersion }} (CM v${{ matrix.certManager }})
    env:
      KUBECONFIG: /tmp/kubeconfig-microk8s.yaml
      USE_EXISTING_CLUSTER: true

    strategy:
      fail-fast: false
      matrix:
        # https://github.com/jetstack/cert-manager/tags
        certManager:
        - "0.15.2"
        - "0.16.1"
        - "1.0.3"

        # https://snapcraft.io/microk8s
        k8sVersion:
        - "1.18"
        - "1.19"

    steps:
    - uses: actions/setup-go@v2
      with:
        go-version: 1.14
    - name: Install Kubernetes v${{ matrix.k8sVersion }}
      run: |
        sudo snap install microk8s --channel='${{ matrix.k8sVersion }}/stable' --classic

        sudo microk8s.start

        # https://microk8s.io/docs/addons
        sudo microk8s.enable dns storage ingress registry
    - name: Wait for Kubernetes to be ready
      timeout-minutes: 15
      run: |
        sudo microk8s.status
        while [[ ! $(sudo microk8s.kubectl cluster-info) ]] ; do
          echo "kubernetes not ready yet..." >&2
          sleep 1
        done
        sudo microk8s.config > "${KUBECONFIG}"

    - name: Install CertManager v${{ matrix.certManager }}
      run: |
        # Try the recet way to install crd or fallback to the old one
        version='${{ matrix.certManager }}'
        shortVersion="${version%.*}"
        set -ex
        kubectl apply -f "https://github.com/jetstack/cert-manager/releases/download/v${version}/cert-manager.yaml"
        kubectl wait --for=condition=Ready pod --all --timeout 300s -n cert-manager

    - uses: actions/checkout@v2
    - name: go tests
      run: |
        make go-test

    - name: build harbor-operator
      run: |
        make docker-build IMG=localhost:32000/harbor-operator:dev_test
        skopeo copy docker-daemon:localhost:32000/harbor-operator:dev_test docker://localhost:32000/harbor-operator:dev_test --tls-verify=false

    - name: install harbor-operator
      run: |
        set -ex
        kubectl create ns harbor-operator-ns
        cd config/default
        kustomize edit set image goharbor/harbor-operator=localhost:32000/harbor-operator:dev_test
        kustomize build | kubectl apply -f -

        # make helm-install IMG=localhost:32000/harbor-operator:dev_test

        kubectl wait --for=condition=Ready pod --all --timeout 300s -n harbor-operator-ns

    - name: install harbor
      run: |
        export GITHUB_TOKEN=xxx
        set -ex
        make sample
        kubectl wait --for=condition=Ready pod --all --timeout 300s || (kubectl get all; exit 1)
        kubectl get all

    - name: test harbor
      run: |
        set -ex
        echo 127.0.0.1 core.harbor.domain | sudo tee -a /etc/hosts
        curl https://core.harbor.domain/api/v2.0/systeminfo -H "Host: core.harbor.domain" -i -k
        sudo mkdir -p /etc/docker/certs.d/core.harbor.domain
        kubectl get secret sample-public-certificate -o jsonpath='{.data.ca\.crt}' \
          | base64 --decode \
          | sudo tee "/etc/docker/certs.d/core.harbor.domain/ca.crt"
        # docker login, create image, docker push, docker pull
        docker login core.harbor.domain -u admin -p Harbor12345
        docker run busybox dd if=/dev/urandom of=test count=10 bs=1MB
        DOCKERID=`docker ps -l -q`
        docker commit $DOCKERID core.harbor.domain/library/busybox:test
        docker push core.harbor.domain/library/busybox:test
        docker pull core.harbor.domain/library/busybox:test


  # Kubernetes
  crd-kubernetes-resources:
    runs-on: ubuntu-latest
    name: 'kubernetes_resources: ./config/crd'
    steps:
    - uses: actions/setup-go@v2
      with:
        go-version: 1.14
    - uses: actions/checkout@v2
    - run: make manifests
    - uses: azure/k8s-bake@v1
      with:
        renderEngine: 'kustomize'
        kustomizationPath: './config/crd'
        kubectl-version: 'latest'

  operator-kubernetes-resources:
    runs-on: ubuntu-latest
    name: 'kubernetes_resources: ./config/rbac'
    steps: 
    - uses: actions/setup-go@v2
      with:
        go-version: 1.14
    - uses: actions/checkout@v2
    - run: make manifests
    - uses: azure/k8s-bake@v1
      with:
        renderEngine: 'kustomize'
        kustomizationPath: './config/rbac'
        kubectl-version: 'latest'

  samples-kubernetes-resources:
    runs-on: ubuntu-latest
    name: 'kubernetes_resources: ./config/samples'
    steps: 
    - uses: actions/checkout@v2
    - uses: azure/k8s-bake@v1
      with:
        renderEngine: 'kustomize'
        kustomizationPath: './config/samples'
        kubectl-version: 'latest'

  kubernetes-resources:
    runs-on: ubuntu-latest
    name: 'kubernetes_resources: ./config/${{ matrix.path }}'

    strategy:
      fail-fast: false
      matrix:
        # https://github.com/jetstack/cert-manager/tags
        path:
        - samples/chartmuseum
        - samples/core
        - samples/database
        - samples/harbor
        - samples/harbor-full
        - samples/jobservice
        - samples/notary
        - samples/notary-server
        - samples/notary-signer
        - samples/portal
        - samples/registry
        - samples/registryctl

    steps: 
    - uses: actions/checkout@v2
    - uses: azure/k8s-bake@v1
      with:
        renderEngine: 'kustomize'
        kustomizationPath: './config/${{ matrix.path }}'
        kubectl-version: 'latest'

  # Documentation
  md-lint:
    runs-on: ubuntu-latest
    name: 'documentation: lint'
    steps:
    - uses: actions/checkout@v2
    - run: make md-lint

  # Go Releaser
  release:
    runs-on: ubuntu-latest
    name: 'release: snapshot'
    steps:
    - uses: actions/setup-go@v2
      with:
        go-version: 1.14
    - uses: actions/checkout@v2
    - name: Import GPG key
      id: import_gpg
      uses: crazy-max/ghaction-import-gpg@v3
      with:
        gpg-private-key: "${{ secrets.GPG_PRIVATE_KEY }}"
        passphrase: "${{ secrets.GPG_PASSPHRASE }}"
    - run: make release-test
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
